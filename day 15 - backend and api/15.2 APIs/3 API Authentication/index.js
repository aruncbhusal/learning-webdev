/* We don't want everyone to be able to access every API, some APIs need to br protected from outsiders
That is why we need authentication and authorization in our APIs
There are multiple levels in this API security:
No authentication, Basic authentication, API Key Based Authorization, and Token Authorization
We have already used no authentication APIs in the last modules, they usually protect themselves from overuse with rate limits
These are usually APIs that do not have sensitive data or have very little data to send.

The next level is basic authentication, where we use username and password to registed into the service for the API
then we use the endpoint and pass the Base64 encoded header containing the username and password to the endpoint
The endpoint then sends the data if the authentication is success else it sends a 401: Not Authorized.
We have an API secrets-api.appbrewery.com where there are different APIs, one is for setting up a username/password
There's a /random endpoint which has no authentication and sends a single secret
But if we use /all endpoint, we need to send the username and password. It also has pagination included
which is because we don't want to send massive amounts of data via an API so we instead split into pages
We can use Postman to create a get request, by selecting basic authentication as the authentication type

The next level is API Key Authorization. The difference between authorization and authentication is that
authorization simply allows a client to access the API endpoint, while authorization identifies the user to the service
With API keys, services can track the usage per API key, and in some cases, charge the client based on the usage 
In this example practice, we can hit /generate-api-key endpoint to get an api key as a response
Then we can use this API key as a parameter, along with a "score" which is the minimum embarrassment score of the secret confession
Our task is to use postman to get responses with secrets which have score equal or higher than 7
Some APIs require the API Key to be put in the query, some require it in the header, so we need to take care of that

The final level of authentication is Token Based Authentication. This is a higher level because:
- In basic authentication, we use base64 encoding, which can be decoded if our message is intercepted,
though usually APIs with basic authentication use HTTPS so the data sent back and forth is encrypted
- In API Key based authorization, it is more secure because we can delete API Keys, regenerate them, rate limit, etc
So even if anyone gets a hand on our API Keys, they are much less likely to be able to misuse it
But token based authentications let third party access an API through the API provider as the user using a token
This token is generated by the API provider using user's username and password.
The third party application can then use this token to make requests on behalf of the user without knowing their username/password
The most popular example is OAuth.
In this example, we'll be using Bearer Token which we can get from /get-auth-token endpoint with the username and password as body
This token can then be used as a header when requesting to endpoints like /secrets/{id}
It is mostly used when using methods like POST, PUT, DELETE..
We can use Postman to get the bearer token and make the request to retrieve a secret with id of 2 */

/* Now the challenge here is to do whatever we did in postman in code
We will need to ensure all the TODOs are taken care of and complete the challenge */

import express from 'express';
import axios from 'axios';

const app = express();
const port = 3000;
const API_URL = 'https://secrets-api.appbrewery.com/';

//TODO 1: Fill in your values for the 3 types of auth.
const yourUsername = 'testestest';
const yourPassword = 'testestest';
const yourAPIKey = '0af7ac2f-c636-4277-b5f8-21c9eb1d8016';
const yourBearerToken = 'a23a05a1-901b-4864-abfa-31fe7fc95a8c';

app.get('/', (req, res) => {
    res.render('index.ejs', { content: 'API Response.' });
});

app.get('/noAuth', async (req, res) => {
    //TODO 2: Use axios to hit up the /random endpoint
    //The data you get back should be sent to the ejs file as "content"
    //Hint: make sure you use JSON.stringify to turn the JS object from axios into a string.
    try {
        const response = await axios.get(API_URL + 'random');
        const result = response.data;
        res.render('index.ejs', { content: JSON.stringify(result) });
    } catch (error) {
        console.log('There was an error with the request: ' + error.message);
        res.render('index.ejs', { content: error.message });
    }
    // Thankfully I remember how it works, or at least I think I do
    // Took me some time to debug because first I had put /random instead of random, then I didn't define result
});

app.get('/basicAuth', async (req, res) => {
    //TODO 3: Write your code here to hit up the /all endpoint
    //Specify that you only want the secrets from page 2
    //HINT: This is how you can use axios to do basic auth:
    // https://stackoverflow.com/a/74632908
    /*
   axios.get(URL, {
      auth: {
        username: "abc",
        password: "123",
      },
    });
  */
    try {
        const response = await axios.get(API_URL + 'all', {
            auth: {
                username: yourUsername,
                password: yourPassword,
            },
            params: {
                page: 2,
            },
        });
        // Just used what was in the hint, nothing to scratch my head for
        const result = response.data;
        res.render('index.ejs', { content: JSON.stringify(result) });
    } catch (error) {
        console.log('There was an error with the request: ' + error.message);
        res.render('index.ejs', { content: error.message });
    }
});
// I had misspelled 'username' as 'usernmae' and it made me think for 10-15 mins before I found that out

app.get('/apiKey', async (req, res) => {
    //TODO 4: Write your code here to hit up the /filter endpoint
    //Filter for all secrets with an embarassment score of 5 or greater
    //HINT: You need to provide a query parameter of apiKey in the request.
    try {
        const response = await axios.get(API_URL + 'filter', {
            params: {
                score: 5,
                apiKey: yourAPIKey,
            },
        });
        // Just used what was in the hint, nothing to scratch my head for
        const result = response.data;
        res.render('index.ejs', { content: JSON.stringify(result) });
    } catch (error) {
        console.log('There was an error with the request: ' + error.message);
        res.render('index.ejs', { content: error.message });
    }
});

app.get('/bearerToken', async (req, res) => {
    //TODO 5: Write your code here to hit up the /secrets/{id} endpoint
    //and get the secret with id of 42
    //HINT: This is how you can use axios to do bearer token auth:
    // https://stackoverflow.com/a/52645402
    /*
  axios.get(URL, {
    headers: { 
      Authorization: `Bearer <YOUR TOKEN HERE>` 
    },
  });
  */
    try {
        const response = await axios.get(API_URL + 'secrets/42', {
            headers: {
                Authorization: `Bearer ${yourBearerToken}`,
            },
        });
        // Just used what was in the hint, nothing to scratch my head for
        const result = response.data;
        res.render('index.ejs', { content: JSON.stringify(result) });
    } catch (error) {
        console.log('There was an error with the request: ' + error.message);
        res.render('index.ejs', { content: error.message });
    }
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
